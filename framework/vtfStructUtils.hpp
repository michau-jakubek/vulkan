#ifndef __VTF_STRUCT_UTILS_HPP_INCLUDED__
#define __VTF_STRUCT_UTILS_HPP_INCLUDED__

#include "vulkan/vulkan.h"
#include "vtfZDeletable.hpp"
#include <typeinfo>

namespace vtf
{

template<class> std::bad_typeid mkstype;

#define MKSTYPE(vkstructtype_, vkstructname_) template<> inline constexpr \
	VkStructureType	mkstype<vkstructtype_> = vkstructname_

MKSTYPE(VkPhysicalDeviceProperties2,				VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2);
MKSTYPE(VkPhysicalDeviceFeatures2,					VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2);
MKSTYPE(VkPhysicalDeviceMultiviewProperties,		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES);
MKSTYPE(VkPhysicalDeviceMultiviewFeatures,			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES);
MKSTYPE(VkValidationFeaturesEXT,					VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT);
MKSTYPE(VkPhysicalDeviceDynamicRenderingFeatures,	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES);
MKSTYPE(VkRenderPassBeginInfo,						VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO);
MKSTYPE(VkApplicationInfo,							VK_STRUCTURE_TYPE_APPLICATION_INFO);
MKSTYPE(VkMemoryAllocateInfo,						VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO);
MKSTYPE(VkMappedMemoryRange,						VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE);
MKSTYPE(VkRenderingAttachmentInfo,					VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO);
MKSTYPE(VkRenderingInfo,							VK_STRUCTURE_TYPE_RENDERING_INFO);
MKSTYPE(VkPhysicalDeviceSubgroupProperties,			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES);
MKSTYPE(VkPhysicalDeviceMaintenance4Features,		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES);
MKSTYPE(VkPhysicalDeviceMaintenance4Properties,		VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES);
MKSTYPE(VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR,
													VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR);
MKSTYPE(VkPhysicalDeviceSubgroupSizeControlFeatures, VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES);
MKSTYPE(VkPipelineShaderStageRequiredSubgroupSizeCreateInfo,
													VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO);
MKSTYPE(VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures,
													VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES);
MKSTYPE(VkPhysicalDeviceShaderTerminateInvocationFeatures,
													VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES);
MKSTYPE(VkPhysicalDeviceVulkan11Features,			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES);
MKSTYPE(VkPhysicalDeviceVulkan12Features,			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES);
MKSTYPE(VkPhysicalDeviceVulkan13Features,			VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES);
MKSTYPE(VkPhysicalDeviceSynchronization2Features,	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES);
MKSTYPE(VkPhysicalDeviceShaderObjectFeaturesEXT,	VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT);
MKSTYPE(VkPhysicalDeviceShaderObjectPropertiesEXT,  VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT);
MKSTYPE(VkPipelineInputAssemblyStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO);
MKSTYPE(VkPipelineVertexInputStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO);
MKSTYPE(VkPipelineTessellationStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO);
MKSTYPE(VkPipelineViewportStateCreateInfo,			VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO);
MKSTYPE(VkPipelineRasterizationStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO);
MKSTYPE(VkPipelineMultisampleStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO);
MKSTYPE(VkPipelineDepthStencilStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO);
MKSTYPE(VkPipelineColorBlendStateCreateInfo,		VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO);
MKSTYPE(VkPipelineDynamicStateCreateInfo,			VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO);
MKSTYPE(VkGraphicsPipelineCreateInfo,				VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO);
MKSTYPE(VkShaderModuleCreateInfo,					VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO);
MKSTYPE(VkShaderCreateInfoEXT,						VK_STRUCTURE_TYPE_SHADER_CREATE_INFO_EXT);
MKSTYPE(VkFramebufferCreateInfo,					VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO);
MKSTYPE(VkRenderPassCreateInfo,						VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO);
MKSTYPE(VkRenderPassMultiviewCreateInfo,			VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO);
MKSTYPE(VkDeviceQueueCreateInfo,					VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO);
MKSTYPE(VkDeviceCreateInfo,							VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO);
MKSTYPE(VkFenceCreateInfo,							VK_STRUCTURE_TYPE_FENCE_CREATE_INFO);
MKSTYPE(VkSemaphoreCreateInfo,						VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO);
MKSTYPE(VkInstanceCreateInfo,						VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO);
MKSTYPE(VkDebugUtilsMessengerCreateInfoEXT,			VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT);
MKSTYPE(VkDebugReportCallbackCreateInfoEXT,			VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT);
MKSTYPE(VkPipelineShaderStageCreateInfo,			VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO);
MKSTYPE(VkComputePipelineCreateInfo,				VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO);
MKSTYPE(VkDescriptorPoolCreateInfo,					VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO);
MKSTYPE(VkDescriptorSetLayoutCreateInfo,			VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO);
MKSTYPE(VkDescriptorSetAllocateInfo,				VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO);
MKSTYPE(VkWriteDescriptorSet,						VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET);
MKSTYPE(VkPipelineLayoutCreateInfo,					VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO);
MKSTYPE(VkCommandBufferInheritanceInfo,				VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO);
MKSTYPE(VkCommandBufferBeginInfo,					VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO);
MKSTYPE(VkSubmitInfo,								VK_STRUCTURE_TYPE_SUBMIT_INFO);
MKSTYPE(VkBindSparseInfo,							VK_STRUCTURE_TYPE_BIND_SPARSE_INFO);
MKSTYPE(VkDeviceGroupBindSparseInfo,				VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO);
MKSTYPE(VkDependencyInfo,							VK_STRUCTURE_TYPE_DEPENDENCY_INFO);
MKSTYPE(VkBufferCopy2,								VK_STRUCTURE_TYPE_BUFFER_COPY_2);
MKSTYPE(VkCopyBufferInfo2,							VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2);
MKSTYPE(VkImageCopy2,								VK_STRUCTURE_TYPE_IMAGE_COPY_2);
MKSTYPE(VkCopyImageInfo2,							VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2);
MKSTYPE(VkBufferImageCopy2,							VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2);
MKSTYPE(VkCopyImageToBufferInfo2,					VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2);
MKSTYPE(VkCopyBufferToImageInfo2,					VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2);
MKSTYPE(VkVertexInputAttributeDescription2EXT,		VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT);
MKSTYPE(VkVertexInputBindingDescription2EXT,		VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT);
MKSTYPE(VkPhysicalDeviceExtendedDynamicStateFeaturesEXT,
													VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT);

struct makeVkStruct
{
	void* m_pNext;
	makeVkStruct (void* pNext = nullptr)
		: m_pNext(pNext) {}
	template<class VKStructure>
	operator VKStructure () {
		VKStructure s{};
		s.sType = mkstype<VKStructure>;
		s.pNext = m_pNext;
		return s;
	}
};

template<class VKStructure>
auto makeVkStructT (void *pNext = nullptr) -> VKStructure
{
	struct makeVkStruct maker(pNext);
	return maker.operator VKStructure();
}

template<class VkStructName>
struct VkStruct : public VkStructName
{
	inline constexpr VkStruct(add_ptr<void> pNext = nullptr)
		: VkStructName()
	{
		add_ref<VkStructName>(*this) = makeVkStruct(pNext);
	}
};

} // namespace vtf

#endif // __VTF_STRUCT_UTILS_HPP_INCLUDED__
