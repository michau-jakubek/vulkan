Prerequisites:
  * Vulkan SDK
  * CMake
  * C++ compilers
  * GLFW library

How to build:
  * Download and install Vulkan SDK   - https://vulkan.lunarg.com/
  * Download and CMake build system   - https://cmake.org/download/
  * Install compilers. On Linux prefered g++ or clang++, on Windows Visual Studio 19
  * Download and install GLFW library - https://www.glfw.org/download
  * Download project from this site using: git clone https://github.com/michau-jakubek/vulkan.git
  * Move to the root folder of the project
  * Inside make a build folder (e.g. 'build') and go into

  * In general to create a project or a solution type:
    cmake -G "???" -DCMAKE_BUILD_TYPE=??? -DVULKAN_INCLUDE_DIR=??? -DVULKAN_LIB_PATH=???
                                          -DGLFW3_INCLUDE_DIR=???  -DGLFW3_LIB_PATH=??? ..
    -DCMAKE_BUILD_TYPE    Debug or Release
    -DVULKAN_INCLUDE_DIR  must point to the Vulkan include path
    -DVULKAN_LIB_PATH     must point to the Vulkan link library
    -DGLFW3_INCLUDE_DIR  must point to the GLFW v3 include path
    -DGLFW3_LIB_PATH      must point to the GLFW v3 link library
    .. (do not forget)    must point to the folder with project CMakeLists.txt
    You can also specify -DCMAKE_CXX_COMPILER for your favorite one.

    Linux example:
      cmake -DCMAKE_BUILD_TYPE=DEBUG -DVULKAN_INCLUDE_DIR=/opt/vulkan/1.3.204.1/x86_64/include \
                                     -DVULKAN_LIB_PATH=/opt/vulkan/1.3.204.1/x86_64/lib/libvulkan.so \
                                     -DGLFW3_INCLUDE_DIR=/usr/include \
                                     -DGLFW3_LIB_PATH=/usr/lib/x86_64-linux-gnu/libglfw.so.3 ..
    Windows example:
      cmake -G "Visual Studio 16 2019" -DVULKAN_INCLUDE_=c:\\VulkanSDK\\1.3.216.0\\Include ^
                                       -DVULKAN_LIB_PATH=c:\\VulkanSDK\\1.3.216.0\\Lib\\vulkan-1.lib ^
                                       -DGLFW3_INCLUDE_DIR=c:\\VulkanDeps\\glfw-3.3.8.bin.WIN64\\include ^
                                       -DGLFW3_LIB_PATH=c:\\VulkanDeps\\glfw-3.3.8.bin.WIN64\\lib-vc2019\\glfw3.lib ..

	Additionally, instead of specifing VULKAN_* and GLFW3_*, you can try LOOK_FOR_VULKAN and LOOK_FOR_GLFW
	giving a folder name with VulkanSDK and GLFw3 stuff. If they seem to be ambigous try HINT_FOR_VULKAN or
	HINT_FOR_GLFW3 respectively to tell more details. For example this would be VulkanSDK version like 1.3.204.1,Lib32.

  * Build an executable:
    On Linux simply call 'make -j23' command. J23 is my favorite parameter, it is a cryptonym of intelligence agent Hans Kloss.
    On Windows open an IDE then open a solution. You can find it in your build folder with 'my_project.sln' name. Build solution from menu.
  
How to run:
  The project consists of two static libraries: framework and tests linked together into the only one executable which is app.
  Next to the mentioned earlier there is another one folder 'assets' which holds all assets visible to the application, i.e. shaders.
  After app is invoked without any arguments you should see a list of available options:

    Pass available option as a parameter:
    Usage: app [options] <test_name> [<test_param>,...]
    Options:
      -h, --help: prints this help
      -t: prints available test names
      -c: builds auto-complete command
      -dl: prints available device list
      -d <id>: picks device by id
      -l <layer> [-l <layer>]: enable layer(s)
      -ll: prints available instance layer names
      -bt: enable backtrace
    Available tests are:
        fractals
        triangle

   -ll option prints available layers on the system.
   -l  allows you to enable specific layer from available layers.
   -dl option allows you to verify what devices are visible to the Vulkan loader.
   -d  options selects a device specified by an index from available devices.
   Finally test_name is a name of the test from available test list to run.

   Ultimately to run the test type:
     > app -d 0 fractals

Enjoy!
